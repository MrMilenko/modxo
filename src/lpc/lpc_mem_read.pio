;SPDX short identifier: BSD-2-Clause
;BSD 2-Clause License
;
;Copyright (c) 2024, Shalx <Alejandro Lopez alexwinger@gmail.com>
;
;Redistribution and use in source and binary forms, with or without
;modification, are permitted provided that the following conditions are met:
;
;1. Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
;
;2. Redistributions in binary form must reproduce the above copyright notice,
;   this list of conditions and the following disclaimer in the documentation
;   and/or other materials provided with the distribution.;
;
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


.program lpc_mem_read

;.side_set 1 opt                 ; TODO: Enable side_sets to save instruction space

.define LCLK_PIN   4
.define LFRAME_PIN 5

.define IO_READ    0
.define IO_WRITE   2
.define lpc_mem_read   4
.define MEM_WRITE  6

.define ADDRESS16b_NIBBLES_TO_READ (4 - 1)
.wrap_target
   set pindirs,0b00000 
entry_point:
   wait 0 gpio LFRAME_PIN
read_start:
   mov ISR, null
   mov OSR, null
   in pins,4
   mov Y, ISR 
   wait 1 gpio LCLK_PIN

read_CT:
   set X, lpc_mem_read 
   wait 0 gpio LCLK_PIN 
   in pins, 4 
   mov Y, ISR 
   jmp pin, continue_reading 
   jmp read_start 
continue_reading:
   jmp X!=Y entry_point
   wait 1 gpio LCLK_PIN

   mov ISR, null
   set X,8
read_nibbles:
   wait 0 gpio LCLK_PIN
   in pins, 4
   wait 1 gpio LCLK_PIN
   jmp X-- read_nibbles

   set pindirs,0b01111 
   set pins 5      ;SYNC
   set X,2
   pull
repeat:
   wait 0 gpio  LCLK_PIN
   wait 1 gpio  LCLK_PIN
   OUT pins,4  [4]
   jmp X-- repeat
   wait 1 gpio LCLK_PIN 
   ;nop side 15;
   set pins, 15 [4]
   set pindirs, 0b00000
.wrap


% c-sdk {

//#define SIDE_PIN 26   // For debugging
#define LPC_PIN_START 0
#define LPC_PIN_TOTAL 5

void lpc_mem_read_program_init(PIO pio, uint sm, uint offset) {
   pio_sm_config c = lpc_mem_read_program_get_default_config(offset);

   // Connect the GPIOs to selected PIO block
   for(uint i = LPC_PIN_START; i < LPC_PIN_START + LPC_PIN_TOTAL; i++) {
      pio_gpio_init(pio, i);
   }

   // Set the selected pin directions for the selected 6 pins. LAD[0-3] + LCLK + LFRAME (false: in)
   pio_sm_set_consecutive_pindirs(pio, sm, LPC_PIN_START, LPC_PIN_TOTAL, false);

   sm_config_set_in_shift(
      &c,
      false,  // ShiftDir : true: shift ISR to right, false: shift ISR to left
      true, // AutoPush : true: enabled, false: disabled
      32      // AutoPush threshold: <0-32>
   );

   // Set 'IN' base pin. To read the LAD[0-3].
   sm_config_set_in_pins(&c, 0);
   sm_config_set_out_pins(&c, LPC_PIN_START, 4);
   sm_config_set_set_pins(&c, LPC_PIN_START, 4);
   sm_config_set_sideset_pins(&c, LPC_PIN_START);

   sm_config_set_jmp_pin(&c, 5);
   sm_config_set_clkdiv(&c, 1);
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
}


%}
